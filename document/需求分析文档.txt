## 需求分析（S1）



### 一 ，确定目标和受众

#### 目标：

- 分享个人见解，知识和经验
- 吸引读者并建立读者社区

#### 目标受众

- 喜欢阅读我写作内容的读者
- 专业领域的同行或学生
- 可能的或作伙伴或者雇主

### 二、功能需求

#### 用户界面

1. **首页**
   - **最新文章列表**：显示最近发布的若干篇文章，包含标题、摘要、发布时间、阅读时长
   - **分类导航**：提供按分类浏览文章的快捷方式。
   - **搜索栏**：提供关键字搜索功能。
   - **注册/登录入口**：显著位置放置注册和登录链接。
2. **博客页面**
   - **文章列表**：以列表或网格形式展示文章，显示标题、摘要、发布时间和作者信息。
   - **分页功能**：支持文章列表的分页显示。
   - **分类筛选**：用户可以按分类筛选文章。
3. **文章详情页**
   - **文章内容**：完整展示文章，包括文字、图片、视频、代码片段等。
   - **作者信息**：显示作者头像、名字和简介，可能包括社交媒体链接。
   - **发布日期和更新时间**：显示文章的发布日期和最近更新时间。
   - **文章分类和标签**：显示文章所属的分类和标签。
   - **评论区**：用户可以查看和发表评论，支持评论回复和点赞。
   - **分享按钮**：用户可以通过社交媒体分享文章（如Facebook, Twitter, LinkedIn）。
4. **关于页面**
   - **博客简介**：简要介绍博客的创建目的和内容方向。
   - **作者介绍**：详细介绍作者背景、专业领域和兴趣爱好，附上作者照片。
   - **鱼缸管理**：根据作者的写作活性完成对鱼的管理
   - **内容管理**：可以对已发布或者未发布的部分做修改
5. **联系页面**
   - **联系表单**：用户可以填写姓名、邮箱和留言，发送信息给管理员。
   - **联系方式**：显示邮箱地址、社交媒体链接等联系方式。
6. **编辑博客页面**
   - **编辑器markdown**: 搭建一个可线上编译的一个支持markdown的编辑器
   - **草稿保存**：允许将未完成的博客进行保存，以便于下一次进行编辑。
   - **博客发布**：允许作者对博客发布进行编辑完成发布。

### 三、非功能需求

1. **性能要求**：
   - 网站加载速度快，响应时间短。
   - 支持高并发访问，确保在流量高峰期依然稳定运行。
2. **安全要求**：
   - 数据加密传输，确保用户隐私。
   - 防止XSS、SQL注入等常见攻击。
   - 定期备份数据，防止数据丢失。
3. **可扩展性**：
   - 代码结构清晰，便于后期功能扩展和维护。
   - 支持插件或模块化设计，方便添加新功能。
4. **兼容性**：
   - 支持主流浏览器（Chrome, Firefox, Safari, Edge等）。

### 四、技术栈选择

1. **前端**：
   - HTML、CSS、JavaScript
   - 前端框架（如React, Vue.js, Angular）
   - UI库（如Bootstrap, Tailwind CSS）
2. **后端**：
   - 编程语言 (Node.js)
   - 后端框架（待选择，初步使用express）
3. **数据库**：
   - 关系型数据库（MySQL,）
4. **其他**：
   - 服务器（Nginx）
   - 托管服务
   - 版本控制（如Git, GitHub）

### 五、设计与原型

1. **线框图和原型**：
   - 使用工具（如Figma, Sketch, Adobe XD）绘制线框图和原型，展示网站布局和交互方式。
2. **UI/UX设计**：
   - 确定配色方案、字体、图标风格等。
   - 设计简洁、美观且用户友好的界面。

### 六、项目管理

1. **任务分配**：
   - 列出所有功能和页面，分配给不同的开发人员或团队成员。
2. **时间规划**：
   - 制定项目时间表，分阶段完成开发任务。
   - 定期进行项目进度检查和调整。
3. **测试与反馈**：
   - 在开发过程中进行功能测试，确保各模块正常运行。
   - 收集用户反馈，进行必要的改进和优化。

### 七、部署与维护

1. **部署**：
   - 将网站部署到服务器或托管平台，配置域名和SSL证书。
   - 确保部署过程自动化（如使用CI/CD工具）。
2. **维护**：
   - 定期更新和维护网站，修复漏洞和优化性能。
   - 持续监控网站运行情况，及时处理问题。